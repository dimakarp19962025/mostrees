body, html { 
    margin: 0; 
    padding: 0; 
    height: 100%; 
    font-family: Arial, sans-serif;
}

#map { 
    height: 100vh; 
}

.leaflet-marker-icon {
    transition: filter 0.3s;
}

.pending { 
    filter: hue-rotate(60deg) saturate(200%); /* –ñ—ë–ª—Ç—ã–π */
}

.approved { 
    filter: hue-rotate(120deg); /* –ó–µ–ª—ë–Ω—ã–π */
}

.rejected { 
    filter: hue-rotate(0deg) saturate(200%); /* –ö—Ä–∞—Å–Ω—ã–π */
}

.duplicate {
    filter: grayscale(100%) opacity(70%);
}

.tree-popup {
    max-width: 300px;
}

.tree-popup img {
    width: 100%;
    border-radius: 5px;
    margin-bottom: 10px;
}

.tree-popup button {
    margin: 5px;
    padding: 8px 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.tree-popup button.reject {
    background-color: #f44336;
}
app.js:

javascript
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = "https://–≤–∞—à-—Å–µ—Ä–≤–µ—Ä.com/api";
let map;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    map = L.map('map').setView([55.751244, 37.618423], 12);
    
    // –°–ª–æ–π OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤
    loadTrees();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadTrees() {
    try {
        const userData = window.Telegram.WebApp.initDataUnsafe.user;
        if (!userData || !userData.id) {
            console.error("User ID not available");
            return;
        }
        
        const response = await fetch(`${API_URL}/trees?user_id=${userData.id}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const trees = await response.json();
        renderTrees(trees);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤—å–µ–≤:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å–µ–≤");
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
function renderTrees(trees) {
    trees.forEach(tree => {
        const marker = L.marker([tree.lat, tree.lng]).addTo(map);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        marker.setIcon(getTreeIcon(tree.status));
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–π
        if (isUserGuardian(tree.district)) {
            marker.bindPopup(createTreePopup(tree));
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–µ—Ä–µ–≤–∞
function getTreeIcon(status) {
    const iconUrl = 'icons/tree-icon.png';
    const icon = L.icon({
        iconUrl: iconUrl,
        iconSize: [32, 32],
        className: status.toLowerCase()
    });
    return icon;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function isUserGuardian(district) {
    const userData = window.Telegram.WebApp.initDataUnsafe.user;
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    return true; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
function createTreePopup(tree) {
    return `
        <div class="tree-popup">
            <img src="${tree.photos[0]}" alt="–§–æ—Ç–æ –¥–µ—Ä–µ–≤–∞">
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(tree.status)}</p>
            <p><strong>–¢–∏–ø:</strong> ${getTypeText(tree.type)}</p>
            <p><strong>–†–∞–π–æ–Ω:</strong> ${tree.district}</p>
            <div class="actions">
                <button onclick="verifyTree('${tree.id}', 'approved')">‚úÖ –û–¥–æ–±—Ä–∏—Ç—å</button>
                <button class="reject" onclick="verifyTree('${tree.id}', 'rejected')">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                <button onclick="markAsDuplicate('${tree.id}')">üö´ –î—É–±–ª–∏–∫–∞—Ç</button>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
window.verifyTree = async (treeId, status) => {
    try {
        const userData = window.Telegram.WebApp.initDataUnsafe.user;
        const response = await fetch(`${API_URL}/trees/${treeId}`, {
            method: 'PATCH',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ 
                status,
                user_id: userData.id 
            })
        });
        
        if (response.ok) {
            alert(`–°—Ç–∞—Ç—É—Å –¥–µ—Ä–µ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
            location.reload();
        } else {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
};

window.markAsDuplicate = async (treeId) => {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ verifyTree
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
    const statuses = {
        'pending': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
        'approved': '–û–¥–æ–±—Ä–µ–Ω–æ',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        'duplicate': '–î—É–±–ª–∏–∫–∞—Ç'
    };
    return statuses[status] || status;
}

function getTypeText(type) {
    const types = {
        'alive': '–ñ–∏–≤–æ–µ –¥–µ—Ä–µ–≤–æ',
        'dead': '–ü–æ–≥–∏–±—à–µ–µ –¥–µ—Ä–µ–≤–æ',
        'attention': '–¢—Ä–µ–±—É–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è',
        'special': '–û—Å–æ–±–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ'
    };
    return types[type] || type;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.Telegram.WebApp.ready();
initMap();
